// button
@mixin button-unstyled {
  border: 0;
  padding: 0;
  background-color: transparent;
  color: inherit;
}

@mixin button-base(
  $padding-vertical: $button-padding-vertical,
  $padding-horizontal: $button-padding-horizontal,
  $transition: $button-transition
) {
  display: inline-block;
  vertical-align: middle;
  padding: $padding-vertical $padding-horizontal;
  transition: $transition;
  text-align: center;
  text-decoration: none;
  white-space: normal;
  cursor: pointer;
  user-select: none;
  touch-action: manipulation;
}

@mixin button-style(
  $bg: $button-bg,
  $bg-dark: $button-bg-dark,
  $color: $button-color,
  $hover-bg: $button-hover-bg,
  $hover-bg-dark: $button-hover-bg-dark,
  $hover-color: $button-hover-color,
  $hover-border-color: $button-hover-border-color,
  $active-bg: $button-active-bg,
  $active-color: $button-active-color,
  $border-width: $button-border-width,
  $border-color: $button-border-color,
  $border-radius: $button-border-radius,
	$text-transform: $button-text-transform,
  $font-family: $headings-font-family,
  $font-weight: $button-font-weight
) {
	font-family: $font-family;
	font-size: $font-size-base * 0.8;
	font-weight: $font-weight;
	letter-spacing: 0.05em;
	text-transform: $text-transform;
  border: $border-width solid $border-color;
  border-radius: $border-radius;
  background-color: $bg;
  color: $color;
  font-size: to-rem(14px);

  &:hover,
  &:focus {
    outline: 0;
    text-decoration: none;
    border-color: $hover-border-color;
    background-color: $hover-bg;
    color: $hover-color;
  }

  &:active {
    background-color: $active-bg;
    color: $active-color;
	}
}

@mixin button-disabled($disabled-opacity: $button-disabled-opacity) {
  &.disabled,
  &:disabled {
    opacity: $disabled-opacity;
    cursor: default;
    pointer-events: none;
  }
}

@mixin button {
  @include button-base;
  @include button-style;
  @include button-disabled;
}


// list
@mixin list-unstyled {
  padding-left: 0;
  list-style: none;
}

@mixin list-inline($spacing: 1rem, $center: false, $child-selector: 'li') {
  @include list-unstyled;

  display: flex;
  flex-wrap: wrap;
  margin-left: $spacing * -1;

  @if $center {
    justify-content: center;
  }

  > #{$child-selector} {
    margin-left: $spacing;
  }
}


// scale headings using modular scale
@mixin scale-headings($max-scale: 5, $base: $type-scale-base) {
  @each $heading in $headings {
    #{$heading} {
			font-size: modular-scale($max-scale - 1, $base);

			@include mq(md) {
				font-size: modular-scale($max-scale, $base);
			}
    }

    $max-scale: $max-scale - 1;
  }
}

// loop all breakpoints and output content
@mixin loop-breakpoints($breakpoints: $mq-breakpoints, $inclusive: true, $mq: true) {
  $breakpoint-keys: map-keys($breakpoints);

  @for $i from 1 through length($breakpoint-keys) {
    $breakpoint: nth($breakpoint-keys, $i) !global;
    $is-first-breakpoint: $breakpoint == nth($breakpoint-keys, 1) !global;
    $is-last-breakpoint: $breakpoint == nth($breakpoint-keys, length($breakpoint-keys)) !global;

    @if $mq {
      @if $inclusive {
        // first breakpoint
        @if $is-first-breakpoint {
          @content;
        }
        // remaining breakpoints
        @else {
          @include mq($breakpoint, $breakpoints: $breakpoints) {
            @content;
          }
        }
      }
      @else {
        // first breakpoint
        @if $is-first-breakpoint {
          @if length($breakpoint-keys) > 1 {
            @include mq($until: nth($breakpoint-keys, $i + 1), $breakpoints: $breakpoints) {
              @content;
            }
          }
          @else {
            @content;
          }
        }
        // last breakpoint
        @else if $is-last-breakpoint {
          @include mq($breakpoint, $breakpoints: $breakpoints) {
            @content;
          }
        }
        // remaining breakpoints
        @else {
          @include mq($breakpoint, nth($breakpoint-keys, $i + 1), $breakpoints: $breakpoints) {
            @content;
          }
        }
      }
    }
    @else {
      @content;
    }
  }
}
